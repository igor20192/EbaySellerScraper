# for item in items:
            #     try:
            #         # Extract product details
            #         title = await extract_text(
            #             await item.query_selector(".s-item__title")
            #         )
            #         price = await extract_text(
            #             await item.query_selector("span.s-item__price")
            #         )
            #         # Extract product link
            #         item_url = await item.query_selector("a.s-item__link")
            #         item_url_href = (
            #             await item_url.get_attribute("href") if item_url else "N/A"
            #         )
            #         if not item_url_href:
            #             logging.warning("Item URL not found, skipping this item.")
            #             continue

            #         context = await browser.new_context()
            #         item_page = await context.new_page()
            #         await item_page.goto(item_url_href, wait_until="domcontentloaded")

            #         category = await extract_text(
            #             await item_page.query_selector(
            #                 "ul li a.seo-breadcrumb-text span"
            #             )
            #         )

            #         # Extract available quantity text

            #         quantity = await extract_text(
            #             await item_page.query_selector(
            #                 "#qtyAvailability .ux-textspans--SECONDARY"
            #             )
            #         )

            #         # Replace your existing condition element code with:
            #         condition = await extract_text(
            #             await item_page.query_selector(
            #                 ".x-item-condition-text .ux-textspans"
            #             )
            #         )

            #         # Extract brand text
            #         brand = await extract_text(
            #             await item_page.query_selector(
            #                 "dl[data-testid='ux-labels-values'].ux-labels-values--brand dd span.ux-textspans"
            #             )
            #         )

            #         # Extract all images
            #         image_urls = await extract_image_urls(item_page)

            #         product_data = {
            #             "title": title,
            #             "price": price,
            #             "category": category,
            #             "image_urls": image_urls,
            #             "item_url_href": item_url_href,
            #             "seller_url": seller_url,
            #             "quantity": quantity,
            #             "brand": brand,
            #             "condition": condition,
            #         }
            #         await process_product_variants(item_page, product_data, sheet)

            #     except Exception as e:
            #         logging.error(f"Error processing item: {e}", exc_info=True)